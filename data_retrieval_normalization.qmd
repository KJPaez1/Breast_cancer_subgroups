---
title: "Data retrieval, EDA, and normalization"
format: html
editor: visual
---

#### References

https://doi.org/10.3389/fimmu.2021.666137 not help https://doi.org/10.1038/s41598-023-40042-7 https://doi.org/10.1016/j.ebiom.2019.07.046 https://osf.io/6ucka?view_only=da4f860bd2474745880944fce1d433b1

## Load packages

```{r include=FALSE}
library(dplyr)
library(TCGAbiolinks)
library(GEOquery)
library(limma)
library(gtsummary)
library(reportfactory)

library(tidyverse)
library(DESeq2)
library(gridExtra)
library(pheatmap)
library(RColorBrewer)
library(gridExtra)

library(factoextra)
library(FactoMineR)
library(reportfactory)
library(car)
library(rfextras)
library(finalfit)
library(flextable)
library(janitor)
```

#### Theme for tables with gtsummary

```{r}
my_theme <-
  list(
    "pkgwide-fn:pvalue_fun" = function(x) style_pvalue(x, digits = 2),
    "pkgwide-fn:prependpvalue_fun" = function(x) style_pvalue(x, digits = 2, prepend_p = TRUE),

    "tbl_summary-str:continuous_stat" = "{median} ({p25}, {p75})",
    "tbl_summary-str:categorical_stat" = "{n} ({p}%)",
    
    "tbl_summary-fn:percent_fun" = function(x) style_number(x, digits = 1, scale = 100),
    
    "tbl_summary-arg:missing" = "ifany"
  )

set_gtsummary_theme(my_theme)
theme_gtsummary_language(language = "en")
theme_gtsummary_compact()
```

## Retrieve datasets

#### BRCA-TCGA

Retrieved from XENA and TCGAbiolinks(https://xenabrowser.net/datapages/)

```{r include=FALSE}
# Expression data
BRCA.htseq_counts = read.table(file = "TCGA-BRCA.htseq_counts.tsv",
                               sep = "\t",
                               header = T,
                               row.names = 1) # [1] 60488  1217

# Data is log2(x+1) transformed. We reverse that transformation
BRCA.htseq_counts_round_before = round(((2 ^ BRCA.htseq_counts) - 1), 0)
BRCA.htseq_counts_round = round(((2 ^ BRCA.htseq_counts) - 1), 0)


# Clinical data from xena
library(readr)
tcga_clinical_xena <- read_delim("clinical_BRCA_xena.tsv", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE) # [1] 1284  140

# Before: [1] "TCGA-A2-A0CY-01A" | after [1] "TCGA.A2.A0CY.01A"
tcga_clinical_xena$sample.id <- gsub("-",
                                     ".",
                                     tcga_clinical_xena$submitter_id.samples)

# Subset only those cases with expression data
tcga_clinical_xena <- tcga_clinical_xena[tcga_clinical_xena$sample.id %in% colnames(BRCA.htseq_counts_round),] # [1] 1217  141


# Clinical data from TCGAbiolinks
#query.clin <- GDCquery(project = "TCGA-BRCA",
                       #data.category = "Clinical",
                       #data.format = "BCR XML")


#query.bios <- GDCquery(project = "TCGA-BRCA",
                       #data.category = "Biospecimen",
                       #data.format = "BCR XML")

#GDCdownload(query.bios)

#GDCdownload(query.rna, files.per.chunk = 1 ,directory = my.dir)

#BRCA.clin <- GDCprepare_clinic(query = query.clin, 
                               #clinical.info = "patient")
#BRCA.clin <- GDCprepare_clinic(query = query.bios, 
                               #clinical.info = "sample")
```

#### METABRIC

Retrieved from CBioportal. Experiment type: microarray

```{r}
#Expression
metabric_expression = read.table(file = "data_mrna_illumina_microarray.txt",
                               sep = "\t",
                               header = T)

# Clinical data
metabric_clinical <- read_delim("metabric_clinical.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)

```

#### GEO

https://www.tandfonline.com/doi/full/10.2147/OTT.S113855 GSE21653; GSE20685; GSE26971; GSE12776 https://doi.org/10.1038/s41598-021-00268-9 GSE42568; GSE31448;

```{r}
gsetGSE29044 <-
  getGEO("GSE29044", GSEMatrix = TRUE, getGPL = FALSE) # No survival
gsetGSE21653 <- getGEO("GSE21653", GSEMatrix = TRUE, getGPL = FALSE) #
gsetGSE20685 <-
  getGEO("GSE20685", GSEMatrix = TRUE, getGPL = FALSE) # No surv and pam
gsetGSE26971 <-
  getGEO("GSE26971", GSEMatrix = TRUE, getGPL = FALSE) # No PAM50

gsetGSE42568 <-
  getGEO("GSE42568", GSEMatrix = TRUE, getGPL = FALSE) # No PAM50
gsetGSE31448 <- getGEO("GSE31448", GSEMatrix = TRUE, getGPL = FALSE)
gsetGSE134359 <-
  getGEO("GSE134359", GSEMatrix = TRUE, getGPL = FALSE) # No surv

#mine
gsetGSE25055 <- getGEO("GSE25055", GSEMatrix = TRUE, getGPL = FALSE)
```

## Clinical description

#### BRCA-TCGA

Variables included (if available): age, sex, race, sample type, histological type, pathological classification, pam50 subtype, treatment received.

```{r}
#Import curated clinical data from BMC's article
pam50_bmc <- read_csv("pam_50_bmc.csv")

tcga_clinical_xena = tcga_clinical_xena |>  # [1] 1217  142
  mutate(sample_id = gsub(".$", "", submitter_id.samples))

tcga_clinical_xena_1 <- left_join(tcga_clinical_xena, # [1] 1217  150
                                  pam50_bmc,
                                  by = "sample_id")

tcga_clinical_xena_1_before <- tcga_clinical_xena_1 |> mutate(
  age_at_diagnosis = ff_label(age_at_initial_pathologic_diagnosis,
                              "Age at diagnosis"),
  race = race.demographic |>
    fct_recode(
      "White" = "white",
      "Black or African American" = "black or african american",
      "Asian" = "asian",
      "American" = "american indian or alaska native",
      "Not Reported" = "not reported",
      "NA" = ""
    ) |>
    fct_relevel(
      "White",
      "black or african american",
      "Asian",
      "American",
      "Not reported",
      "NA"
    ) |>
    ff_label("Race"),
  sample_type = sample_type.samples |>
    fct_relevel("Primary Tumor",
                "Metastatic",
                "Solid Tissue Normal") |>
    ff_label("Sample type"),
  
  pathologic_stage = as.factor(`Pathologic stage`) |> 
    ff_label("Pathologic stage"),
  
  Histological_type = as.factor(`Histological type`) |> 
    ff_label("Histological type"),
  
  pam50 = PAM50 |>
    fct_recode(
      "HER2 enriched" = "Her2",
      "Luminal A" = "LumA",
      "Luminal B" = "LumB"
    ) |>
    fct_relevel("Basal",
                "HER2",
                "Luminal A",
                "Luminal B",
                "Normal",
                "Normal Tissue") |>
    ff_label("PAM50 subtype"),
  
  radiation_therapy.c = radiation_therapy |>
    fct_recode("NA" = "") |> 
    fct_relevel("Yes",
                "No",
                "NA") |>
    ff_label("Radiation therapy"),
  
  neoadjuvant_treatment = history_of_neoadjuvant_treatment |>
    fct_recode("NA" = "") |> 
    fct_relevel("Yes",
                "No",
                "NA") |>
    ff_label("Neoadjuvant treatment")
)

brca_table_before <- tcga_clinical_xena_1_before |>
  tbl_summary(
    include = c(
      age_at_diagnosis,
      race,
      sample_type,
      pathologic_stage,
      Histological_type,
      pam50,
      radiation_therapy,
      neoadjuvant_treatment
    )
  )

## Table after remove:
##    a) Primary Tumor with no pam50
##    b) Different patological stage to I, II, and III
##    c) Different histological stage than Infiltrating ductal car 
##    and Infiltrating Lobular carcinoma

tcga_clinical_xena_1 <- tcga_clinical_xena_1_before |> 
  filter(sample_type == "Solid Tissue Normal" |
           pathologic_stage %in% c("Stage I",
                                  "Stage II",
                                  "Stage III")
          & !is.na(pam50) & Histological_type
          %in% c("Infiltrating Ductal Carcinoma", 
                 "Infiltrating Lobular Carcinoma"))

brca_table <- tcga_clinical_xena_1 |>
  tbl_summary(
    include = c(
      age_at_diagnosis,
      race,
      sample_type,
      pathologic_stage,
      Histological_type,
      pam50,
      radiation_therapy,
      neoadjuvant_treatment
    )
  )


# save tables

brca_table_before <- as_flex_table(brca_table_before)
save_as_docx(brca_table_before, path = "brca_table_before.docx", align = "center")

brca_table <- as_flex_table(brca_table)
save_as_docx(brca_table, path = "brca_table.docx", align = "center")
```

#### METABRIC

```{r}
metabric_clinical <- clean_names(metabric_clinical) # Cleaning names

# metabric_clinical: 2509 x 39
metabric_clinical = metabric_clinical |>  
  mutate(sample_id = gsub("-", ".", patient_id)) # match syntax

# metabric_clinical: [1] 2509   39 ; metabric_clinical_0: dim 1980 x 39
metabric_clinical_0 <- metabric_clinical[
  metabric_clinical$sample_id %in% colnames(metabric_expression),] 

# Recode
metabric_clinical_1 <- metabric_clinical_0 |> mutate(
  age_at_diagnosis = ff_label(age_at_diagnosis,
                              "Age at diagnosis"),
  sample_type = sample_type |>
    fct_relevel("Primary") |>
    ff_label("Sample type"),
  
  tumor_stage.c = as.factor(tumor_stage) |>
    fct_na_value_to_level() |>
    fct_recode("Stage 0" = "0",
               "Stage I" = "1",
               "Stage II" = "2",
               "Stage III" = "3",
               "Stage IV" = "4",
               "Unknown" = "NA") |>
    
    fct_relevel("Stage 0", "Stage I", "Stage II", "Stage III", 
                "Stage IV", "Unknown") |>
    ff_label("Tumor stage"),
  
  cancer_type_detailed = as.factor(cancer_type_detailed) |> 
    ff_label("Histological type"),
  
  pam50_claudin_low_subtype = pam50_claudin_low_subtype |>
    fct_recode(
      "HER2 enriched" = "Her2",
      "Luminal A" = "LumA",
      "Luminal B" = "LumB"
    ) |>
    fct_relevel("Basal",
                "HER2 enriched",
                "Luminal A",
                "Luminal B",
                "Claudin-low",
                "Normal",
                "NC") |>
    ff_label("PAM50 subtype + Clauding-low"),
  
  chemotherapy = as.factor(chemotherapy) |> 
    fct_recode(
      "Yes" = "YES",
      "No" = "NO"
    ) |> 
    ff_label("Received chemotherapy"),
  
  radio_therapy = as.factor(radio_therapy) |> 
    fct_recode(
      "Yes" = "YES",
      "No" = "NO"
    ) |> 
    ff_label("Received radiotherapy")
  )

# Tables
metabric_table_before <- metabric_clinical_1 |>
  tbl_summary(
    include = c(
      age_at_diagnosis,
      sample_type,
      tumor_stage.c,
      cancer_type_detailed,
      pam50_claudin_low_subtype,
      chemotherapy,
      radio_therapy
    )
  )

metabric_table <- metabric_clinical_1 |>
  filter(cancer_type_detailed %in% c("Breast Invasive Ductal Carcinoma",
                                     "Breast Invasive Lobular Carcinoma",
                                     "Breast Mixed Ductal and Lobular Carcinoma") &
           pam50_claudin_low_subtype != "NC"
           ) |> 
  tbl_summary(
    include = c(
      age_at_diagnosis,
      sample_type,
      tumor_stage.c,
      cancer_type_detailed,
      pam50_claudin_low_subtype,
      chemotherapy,
      radio_therapy
    )
  )

metabric_table_before <- as_flex_table(metabric_table_before)
save_as_docx(metabric_table_before, path = "metabric_table_before.docx", align = "center")

metabric_table <- as_flex_table(metabric_table)
save_as_docx(metabric_table, path = "metabric_table.docx", align = "center")

```

## Exploratory analysis

Main references https://www.bioconductor.org/packages/release/workflows/vignettes/rnaseqGene/inst/doc/rnaseqGene.html number of total samples: (methods) https://www.nature.com/articles/s41598-023-40042-7

### BRCA TCGA

```{r}
## Construct S4 object before

BRCA.htseq_counts_round_before = BRCA.htseq_counts_round_before |> ## Make coincide the order
  select(tcga_clinical_xena_1_before$sample.id) # lenght sample.id = [1] 1217

tcga_clinical_xena_1_before <- tcga_clinical_xena_1_before  |> 
  select(sample.id, everything())

dds_tcga_before = DESeqDataSetFromMatrix(
  countData = BRCA.htseq_counts_round_before,
  colData = tcga_clinical_xena_1_before,
  design = ~ sample_type
)

## Construct S4 object 

BRCA.htseq_counts_round = BRCA.htseq_counts_round_before |> ## match the order
  select(tcga_clinical_xena_1$sample.id) # lenght sample.id = [1] 1017

tcga_clinical_xena_1 <- tcga_clinical_xena_1  |> 
  select(sample.id, everything())

dds_tcga = DESeqDataSetFromMatrix(
  countData = BRCA.htseq_counts_round,
  colData = tcga_clinical_xena_1,
  design = ~ sample_type
)

```

### Pre-filtering and transformation

```{r}
## Pre-filtering based on the smallest group size for sample_type

print(brca_table_before)
print(brca_table) # smallest group is HER2 enriched = 71

smallestGroupSize_before = 113
smallestGroupSize = 113

nrow(dds_tcga_before) # 1217 x 60488
nrow(dds_tcga) # 1018 x 60488

keep_before = rowSums(counts(dds_tcga_before) >= 10) >= smallestGroupSize_before
keep = rowSums(counts(dds_tcga) >= 10) >= smallestGroupSize 

dds_tcga_before = dds_tcga_before[keep_before,] # nrow = 25832
dds_tcga = dds_tcga[keep,] # nrow = 25832

## Transformation using variance stabilizing transformation (vst) for 
## negative binomial data
vsd_before = vst(dds_tcga_before, blind = FALSE)
vsd = vst(dds_tcga, blind = FALSE)
head(assay(vsd), 3)

## Transformation for comparison with rlog and 
#rld = rlog(dds_tcga, blind = FALSE) ## to heavy, apagalo otto !!!
#head(assay(rld), 3)

## Transformation to log2 + 1
dds_tcga_before = estimateSizeFactors(dds_tcga_before)
dds_tcga = estimateSizeFactors(dds_tcga)

df_before = bind_rows(
  as.data.frame(log2(counts(dds_tcga_before, normalized = TRUE)[,1:2] + 1)) |> 
    mutate(transformation = "log2(x + 1)"),
  as_data_frame(assay(vsd_before)[, 1:2]) |> mutate(transformation = "vst"))

df = bind_rows(
  as.data.frame(log2(counts(dds_tcga, normalized = TRUE)[,1:2] + 1)) |> 
    mutate(transformation = "log2(x + 1)"),
  as_data_frame(assay(vsd)[, 1:2]) |> mutate(transformation = "vst"))

colnames(df)[1:2] = c("x", "y")
colnames(df_before)[1:2] = c("x", "y")

lvls = c("log2(x + 1)", "vst")

df_before$transformation = factor(df_before$transformation, levels = lvls)
df$transformation = factor(df$transformation, levels = lvls)

corr_before = ggplot(df_before, aes(x = x, y = y)) + 
  geom_hex(bins = 80) +
  coord_fixed() + facet_grid(. ~ transformation) +
  theme(text = element_text(size = 28))

corr = ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid(. ~ transformation) +
  theme(text = element_text(size = 28))

```

## EDA: Sample distances with PCA

To see if fit the expectation from the experiment's design: Normal tissue should be separated from tumoral tissue

```{r}
## Caculate sample dist
#sampleDists_before = dist(t(assay(vsd_before)))
#sampleDists = dist(t(assay(vsd)))

## On a heatmap

sampleDistMatrix_before = as.matrix(sampleDists_before)
sampleDistMatrix = as.matrix(sampleDists)

rownames(sampleDistMatrix) = paste(vsd$sample_type, 
                                   vsd$sample_id, 
                                   sep = " - ")
#alternative
rownames(sampleDistMatrix) = paste(vsd$pam50)

colnames(sampleDistMatrix) = NULL
colors = colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         col = colors)
## PCA
pca_sample_before = plotPCA(vsd_before, intgroup = "sample_type") +
  ggtitle("Before filtering") +
  theme(text = element_text(size = 18))

pca_sample = plotPCA(vsd, intgroup = "sample_type") +
  ggtitle("After filtering") +
  theme(text = element_text(size = 18))


pca_pam50_before = plotPCA(vsd_before, intgroup = "pam50") +
  ggtitle("Before filtering") +
  theme(text = element_text(size = 18))

pca_pam50 = plotPCA(vsd, intgroup = "pam50") + 
  ggtitle("After filtering") +
  theme(text = element_text(size = 18))


pca_hist_before = plotPCA(vsd_before, intgroup = "Histological_type") +
  ggtitle("Before filtering") +
  theme(text = element_text(size = 18))

pca_hist = plotPCA(vsd, intgroup = "Histological_type") + 
  ggtitle("After filtering") +
  theme(text = element_text(size = 18))

grid.arrange(pca_pam50_before, pca_pam50, ncol = 2)
grid.arrange(pca_sample_before, pca_sample, ncol = 2)
grid.arrange(pca_hist_before, pca_hist, ncol = 2)

```

### Sample distances with Multidimentional Scaling (MDS)

```{r}
library("glmpca")

mds_before = as.data.frame(colData(vsd_before)) |> 
  cbind(cmdscale(sampleDistMatrix_before))
mds_before = ggplot(mds_before, aes(x = `1`, y = `2`, color = pam50, shape = sample_type)) +
  geom_point(size = 4) + coord_fixed() + ggtitle("MDS with VST data - Before filtering") +
  theme(text = element_text(size = 18))

mds = as.data.frame(colData(vsd)) |> 
  cbind(cmdscale(sampleDistMatrix))
mds = ggplot(mds, aes(x = `1`, y = `2`, color = pam50, shape = sample_type)) +
  geom_point(size = 4) + coord_fixed() + ggtitle("MDS with VST data") +
  theme(text = element_text(size = 18))

grid.arrange(mds_before, mds, ncol = 2) ## Outliers detected !
```

## Exploratory analysis for BRCA-TCGA with metabolic genes

## Metabolic genes curated by Gong *et al*

### First exploration of metabolic genes

```{r}
metab_genes <- read_csv("metabolic_genes_gong.et.al.csv")

dim(metab_genes) # [1] 1661    2
table(metab_genes[,2])
length(unique(metab_genes$gene_symbol)) #[1] 1661
length(unique(metab_genes$metabolic_pathway)) #[1] 302
```

### Convert ENSEMBL IDs to gene symbols

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
require('biomaRt')
require("dbplyr")

mart <- useMart('ENSEMBL_MART_ENSEMBL')
mart <- useDataset('hsapiens_gene_ensembl', mart)

annotLookup <- getBM(
  mart = mart,
  attributes = c(
    "hgnc_symbol",
    "ensembl_gene_id",
    "gene_biotype"),
  uniqueRows = TRUE)

metab_genes = rename(metab_genes, hgnc_symbol = gene_symbol) ## change name

merged_df <- left_join(metab_genes, annotLookup, by = "hgnc_symbol") ## matching

sum(is.na(merged_df$ensembl_gene_id)) ## No ENSEMBL ID = 124

alias_and_apro = 
  merged_df |>
  filter(is.na(ensembl_gene_id)) |>
  select(hgnc_symbol)

dim(alias_and_apro) ## Subset those with no ENSEMBL ID

write.csv(alias_and_apro, "alias_and_apro.csv") ## Enter to https://www.genenames.org/tools/multi-symbol-checker/ to find the oficial names

merged_df_2 <- left_join(merged_df, hgnc.symbol.check, by = c("hgnc_symbol" = "Input")) ## match to oficial names 

metab_genes_1 <- 
  merged_df_2 |>
  mutate(Approved.symbol = coalesce(Approved.symbol, hgnc_symbol)) |> 
  select(Approved.symbol, metabolic_pathway, hgnc_symbol) ## construct a single column with new oficial and old ones

## look ENSEMBLE again with the new column
metab_genes_2 = 
  left_join(metab_genes_1, annotLookup, by = c("Approved.symbol" = "hgnc_symbol"))


## Remove suffix and match ensemble IDs
ENS_with_suf = data.frame(ENS_S = rownames(BRCA.htseq_counts_round))

ENS_without_suf =
  data.frame(ENS_w = ENS_with_suf$ENS_S <- gsub("\\.\\d+", "", ENS_with_suf$ENS_S))

dim(ENS_without_suf)

ENS_without_suf |> 
  filter(metab_genes_2$ensembl_gene_id %in% ENS_without_suf$ENS_w)

ENS_without_suf = ENS_without_suf |> rename("ensembl_gene_id" = ENS_w)

metab_genes_3 = merge(ENS_without_suf, metab_genes_2, by = "ensembl_gene_id")

metab_genes_4 <- ## definitive list of genes: 4 less. [1] 1657    5
  metab_genes_3 |> 
  group_by(ensembl_gene_id) |> 
  slice(1L)
```

### Subset metabolic genes from TCGA BRCA

```{r}
ENS_rownames = data.frame(ENS_S = rownames(BRCA.htseq_counts_round))

ENS_rownames <- gsub("\\.\\d+", "", ENS_rownames$ENS_S)

BRCA.htseq_counts_round_no_suf = BRCA.htseq_counts_round

rownames(BRCA.htseq_counts_round_no_suf) = ENS_rownames 
head(rownames(BRCA.htseq_counts_round_no_suf), 100) == head(ENS_rownames, 100)

BRCA_TCGA_metab_genes =
  BRCA.htseq_counts_round_no_suf[row.names(BRCA.htseq_counts_round_no_suf) %in%
                                   metab_genes_4$ensembl_gene_id, ]

BRCA_TCGA_metab_genes # [1] 1657 1018
```

### Exploratory analuysis with the metabolic genes - BRCA TCGA

#### Construct S4 object

```{r include=FALSE}
BRCA_TCGA_metab_genes = ## match the order
  BRCA_TCGA_metab_genes |>
  select(tcga_clinical_xena_1$sample.id) # lenght sample.id = [1] 1018

dds_tcga_metab_genes = 
  DESeqDataSetFromMatrix(countData = BRCA_TCGA_metab_genes,
                         colData = tcga_clinical_xena_1,
                         design = ~ sample_type)
```

### Pre-filtering and transformation
It is ommited for metabolic genes, but if i wouldn't, 
it would be based on the smallest group size for sample_type

```{r}
#print(brca_table) # smallest group Solid Tissue Normal, n = 113
#smallestGroupSize = 113
nrow(dds_tcga_metab_genes) # [1] 1657

# keep_metab_genes = rowSums(counts(dds_tcga_metab_genes) >= 10) >= smallestGroupSize 

# dds_tcga_metab_genes = dds_tcga_metab_genes[keep,] 

## Transformation using variance stabilizing transformation (vst) for 
## negative binomial data
vsd_metab_genes = vst(dds_tcga_metab_genes, blind = FALSE)
head(assay(vsd_metab_genes), 3)

## Transformation for comparison with rlog and 
#rld_metab_genes = rlog(dds_tcga_metab_genes, blind = FALSE) # Too heavy !!!
#head(assay(rld_metab_genes), 3)

## Transformation for comparison to log2 + 1
dds_tcga_metab_genes = estimateSizeFactors(dds_tcga_metab_genes)

df_metab_genes = 
  bind_rows(as.data.frame(log2(counts(dds_tcga_metab_genes, normalized = TRUE)[,1:2] + 1)) |>
              mutate(transformation = "log2(x + 1)"),
            as.data.frame(assay(vsd)[, 1:2]) |>
              mutate(transformation = "vst")
            )

colnames(df_metab_genes)[1:2] = c("x", "y")

lvls = c("log2(x + 1)", "vst")

df_metab_genes$transformation = factor(df_metab_genes$transformation, 
                                       levels = lvls)

corr_metab_genes = 
  ggplot(df_metab_genes,
         aes(x = x, y = y)) +
  geom_hex(bins = 80) +
  coord_fixed() + 
  facet_grid(. ~ transformation) +
  theme(text = element_text(size = 28))

```

## Sample distances with PCA

To see if fit the expectation from the experiment's design: Normal tissue should be separated from tumoral tissue

```{r}
## Caculate sample dist
sampleDists_metab_genes = dist(t(assay(vsd_metab_genes)))

## On a heatmap

sampleDistMatrix_metab_genes = as.matrix(sampleDists_metab_genes)

rownames(sampleDistMatrix_metab_genes) =
  paste(vsd_metab_genes$sample_type,
        vsd_metab_genes$sample_id,
        sep = " - ")

#alternative
#rownames(sampleDistMatrix_metab_genes) = paste(vsd_metab_genes$pam50)

colnames(sampleDistMatrix_metab_genes) = NULL
colors = colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix_metab_genes,
         clustering_distance_rows = sampleDists_metab_genes,
         clustering_distance_cols = sampleDists_metab_genes,
         col = colors)
```

## PCA
```{r}
pca_sample_before = plotPCA(vsd_before, intgroup = "sample_type") +
  ggtitle("Before filtering") +
  theme(text = element_text(size = 18))

pca_sample = plotPCA(vsd, intgroup = "sample_type") +
  ggtitle("After filtering") +
  theme(text = element_text(size = 18))


pca_pam50_before = plotPCA(vsd_before, intgroup = "pam50") +
  ggtitle("Before filtering") +
  theme(text = element_text(size = 18))

pca_pam50 = plotPCA(vsd, intgroup = "pam50") + 
  ggtitle("After filtering") +
  theme(text = element_text(size = 18))


pca_hist_before = plotPCA(vsd_before, intgroup = "Histological_type") +
  ggtitle("Before filtering") +
  theme(text = element_text(size = 18))

pca_hist = plotPCA(vsd, intgroup = "Histological_type") + 
  ggtitle("After filtering") +
  theme(text = element_text(size = 18))

grid.arrange(pca_pam50_before, pca_pam50, ncol = 2)
grid.arrange(pca_sample_before, pca_sample, ncol = 2)
grid.arrange(pca_hist_before, pca_hist, ncol = 2)

```

### Sample distances with Multidimentional Scaling (MDS)

```{r}
library("glmpca")

mds_before = as.data.frame(colData(vsd_before)) |> 
  cbind(cmdscale(sampleDistMatrix_before))
mds_before = ggplot(mds_before, aes(x = `1`, y = `2`, color = pam50, shape = sample_type)) +
  geom_point(size = 4) + coord_fixed() + ggtitle("MDS with VST data - Before filtering") +
  theme(text = element_text(size = 18))

mds = as.data.frame(colData(vsd)) |> 
  cbind(cmdscale(sampleDistMatrix))
mds = ggplot(mds, aes(x = `1`, y = `2`, color = pam50, shape = sample_type)) +
  geom_point(size = 4) + coord_fixed() + ggtitle("MDS with VST data") +
  theme(text = element_text(size = 18))

grid.arrange(mds_before, mds, ncol = 2) ## Outliers detected !
```

### Test section

Here we test codes

```{r}
library(dplyr)



```
